pipeline {
  agent { label 'docker' }
  parameters {
    choice(name: 'DOCKER_ACC', choices: ['percona','perconalab'], description: 'Docker repo to use: percona or perconalab')
    choice(
            choices: ['PXB80', 'PXB84'],
            description: 'Choose the product version to test',
            name: 'PRODUCT_TO_TEST'
        )
  }
  stages {
    stage('SET PXB_VERSION and PXB_PKG_VER') {
        steps {
          script {
            sh '''
              rm -rf /package-testing
              rm -f master.zip
              wget https://github.com/Percona-QA/package-testing/archive/master.zip
              unzip master.zip
              rm -f master.zip
              mv "package-testing-master" package-testing
            '''
                    
            def VERSION = sh(
                script: '''grep ${PRODUCT_TO_TEST}_VER VERSIONS | awk -F= '{print \$2}' | sed 's/"//g' ''',
                returnStdout: true
                ).trim()

            def PXB_PKG_VER = sh(
                script: ''' grep ${PRODUCT_TO_TEST}_PKG_VER VERSIONS | awk -F= '{print \$2}' | sed 's/"//g' ''',
                returnStdout: true
                ).trim()
                    
    
            env.PXB_VERSION = "${VERSION}-amd64"
            env.PXB_PKG_VER = "${PXB_PKG_VER}"

            echo "PXB_VERSION fetched: ${env.PXB_VERSION}"
            echo "PXB_PKG_VER fetched: ${env.PXB_PKG_VER}"

          }
       }
     }
    stage('Set environmental variable'){
      steps{
        script {
                    // Now, you can access these global environment variables
          echo "Using PXB_VERSION: ${env.PXB_VERSION}"
          echo "Using PXB_PKG_VER: ${env.PXB_PKG_VER}"
                }
            }
        }
    stage('Prepare') {
      steps {
          script {
            currentBuild.displayName = "#${BUILD_NUMBER}-${PXB_VERSION}-${PXB_PKG_VER}"
            currentBuild.description = "${DOCKER_ACC}"
          }
         }
        }
    stage("Run parallel") {
        parallel {
      stage ('Run trivy analyzer') {
        steps {
            sh """
              sudo yum install -y curl wget git
              TRIVY_VERSION=\$(curl --silent 'https://api.github.com/repos/aquasecurity/trivy/releases/latest' | grep '"tag_name":' | tr -d '"' | sed -E 's/.*v(.+),.*/\\1/')
              wget https://github.com/aquasecurity/trivy/releases/download/v\${TRIVY_VERSION}/trivy_\${TRIVY_VERSION}_Linux-64bit.tar.gz
              sudo tar zxvf trivy_\${TRIVY_VERSION}_Linux-64bit.tar.gz -C /usr/local/bin/
              wget https://raw.githubusercontent.com/aquasecurity/trivy/main/contrib/junit.tpl
              /usr/local/bin/trivy -q image --format template --template @junit.tpl  -o trivy-hight-junit.xml \
              --timeout 10m0s --ignore-unfixed --exit-code 1 --severity HIGH,CRITICAL ${DOCKER_ACC}/percona-server:${PXB_VERSION}-{env.PXB_PKG_VER}
            """
         } //end steps
         post {
           always {
                    junit testResults: "*-junit.xml", keepLongStdio: true, allowEmptyResults: true, skipPublishingChecks: true
                }
        }
      } //end Run trivy analyzer
     
      stage('Run tests') {
        steps {
            sh '''
              # disable THP on the host for TokuDB
              echo "echo never > /sys/kernel/mm/transparent_hugepage/enabled" > disable_thp.sh
              echo "echo never > /sys/kernel/mm/transparent_hugepage/defrag" >> disable_thp.sh
              chmod +x disable_thp.sh
              sudo ./disable_thp.sh
              # run test
              export PATH=${PATH}:~/.local/bin
              sudo yum install -y python3 python3-pip
              rm -rf package-testing
              git clone -b pxb-docker https://github.com/kaushikpuneet07/package-testing.git --depth 1
              cd package-testing/docker-image-tests/pxb
              pip3 install --user -r requirements.txt
              ./run.sh
            '''
        } //end steps
        post {
          always {
          junit 'package-testing/docker-image-tests/pxb/report.xml'
        }
       }
     }
    } //end stages
   } 
  }
}
